# -*- coding: utf-8 -*-
"""project.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1E7L260cLJs0zvTIb73spsC1HAR5tN6Ee
"""

0!pip install yfinance newspaper3k matplotlib

import nltk
nltk.download('punkt')

import yfinance as yf
import pandas as pd
import matplotlib.pyplot as plt

ticker = "AAPL"  # Change this as needed
stock = yf.Ticker(ticker)
data = stock.history(period="5d")

plt.figure(figsize=(10, 5))
plt.plot(data.index, data["Close"], marker="o")
plt.title(f"{ticker} - Last 5 Days Closing Prices")
plt.xlabel("Date")
plt.ylabel("Closing Price (USD)")
plt.grid(True)
plt.show()

!pip install lxml[html_clean]
!pip install newspaper3k
import nltk
nltk.download('punkt')

!pip install feedparser newspaper3k transformers
import nltk
nltk.download('punkt')

import feedparser

query = "Apple stock"
feed = feedparser.parse(f"https://news.google.com/rss/search?q={query.replace(' ', '+')}")
print("Latest articles:")

# Show titles and links
for i, entry in enumerate(feed.entries[:5]):
    print(f"{i+1}. {entry.title}")
    print(f"   {entry.link}")

from newspaper import Article

# Replace with a working article link (non-CNBC, non-Reuters)
url = "https://www.fool.com/investing/2025/06/26/prediction-2-stocks-that-will-be-worth-more-than-a/"  # Example
article = Article(url)
article.download()
article.parse()

news_text = article.text[:1000]
print("üì∞ Article Snippet:\n", news_text[:500])

from transformers import pipeline

summarizer = pipeline("summarization", model="sshleifer/distilbart-cnn-12-6")
summary = summarizer(news_text, max_length=120, min_length=30, do_sample=False)
print("üí° Summary:\n", summary[0]['summary_text'])
st.subheader("üìù News Summary")
st.write(summary)

if news_text and len(news_text.split()) > 50:
    summary = summarizer(news_text, max_length=120, min_length=30, do_sample=False)
    print("üí° Summary:\n", summary[0]['summary_text'])
else:
    print("‚ùå The article text is too short to summarize.")

sentiment_analyzer = pipeline("sentiment-analysis")
sentiment = sentiment_analyzer(news_text[:512])  # first 512 characters only
print("üìà Sentiment:", sentiment)

print("üì∞ Original Snippet:\n", news_text[:500])
print("\nüí° Summary:\n", summary[0]['summary_text'])
print("\nüìà Sentiment:", sentiment[0]['label'], f"(score: {sentiment[0]['score']:.2f})")

from transformers import pipeline

# Load the sentiment analysis pipeline
sentiment_analyzer = pipeline("sentiment-analysis")

# Analyze sentiment on the first 512 characters
sentiment = sentiment_analyzer(news_text[:512])  # Limit to 512 tokens

# Show sentiment result
print("üìà Sentiment Result:")
print(f"Label: {sentiment[0]['label']}, Score: {sentiment[0]['score']:.2f}")

import yfinance as yf

# Replace with your stock symbol (Apple in this example)
ticker_symbol = "AAPL"

# Fetch stock info
stock = yf.Ticker(ticker_symbol)
stock_data = stock.history(period="1d")

# Print current and previous close price
latest_close = stock_data['Close'].iloc[-1]
previous_close = stock_data['Close'].iloc[-2] if len(stock_data) > 1 else "N/A"

print(f"üìä {ticker_symbol} Stock Price Info:")
print(f"Last Close: ${latest_close:.2f}")
print(f"Previous Close: ${previous_close if previous_close != 'N/A' else 'N/A'}")

# Example: Combine sentiment + price info
print("\nüß† Stock Insight Summary:")
print(f"Article Sentiment: {sentiment[0]['label']} (score: {sentiment[0]['score']:.2f})")
print(f"{ticker_symbol} Last Close Price: ${latest_close:.2f}")

if sentiment[0]['label'] == "NEGATIVE":
    print("‚ö†Ô∏è Caution: The article sentiment is negative. Monitor stock performance.")
else:
    print("‚úÖ Positive news sentiment. Could be a good signal.")

!pip install yfinance newspaper3k transformers matplotlib feedparser --quiet
import nltk
nltk.download('punkt')

# Define the stocks you're interested in
tickers = [
    'AAPL', 'TSLA', 'MSFT', 'AMZN',
    'GOOGL', 'NVDA', 'META', 'NFLX',
    'AMD', 'INTC', 'BABA', 'IBM',
    'ORCL', 'PYPL', 'SHOP', 'UBER',
    'BA', 'DIS', 'PEP', 'KO']

import yfinance as yf
import pandas as pd

# Dictionary to store historical prices
price_data = {}

# Fetch last 7 days of price data for each ticker
for ticker in tickers:
    stock = yf.Ticker(ticker)
    hist = stock.history(period="7d")
    price_data[ticker] = hist["Close"]

# Combine into a single DataFrame
df_prices = pd.DataFrame(price_data)
df_prices.index = df_prices.index.date  # simplify dates
df_prices.tail()

import matplotlib.pyplot as plt

plt.figure(figsize=(12, 6))
for ticker in tickers:
    plt.plot(df_prices[ticker], label=ticker)

plt.title("Stock Closing Prices Over Last 7 Days")
plt.xlabel("Date")
plt.ylabel("Price ($)")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

def get_summary_and_sentiment(stock_name):
    import feedparser
    from newspaper import Article

    rss_url = f"https://news.google.com/rss/search?q={stock_name}+stock"
    feed = feedparser.parse(rss_url)

    if not feed.entries:
        return "No news found", "NEUTRAL"

    url = feed.entries[0].link
    print(f"üîó Trying article: {url}")

    try:
        article = Article(url)
        article.download()
        article.parse()
        text = article.text.strip()

        # üîç Fallback if article text is too short
        if len(text.split()) < 50:
            return f"Title only: {feed.entries[0].title}", "NEUTRAL"

        # Summarize and analyze sentiment
        summary = summarizer(text[:1000], max_length=120, min_length=30, do_sample=False)[0]['summary_text']
        sentiment = sentiment_analyzer(text[:512])[0]['label']
        return summary, sentiment

    except Exception as e:
        return f"‚ùå Error: {str(e)}", "NEUTRAL"

summary, sentiment = get_summary_and_sentiment("AAPL")
print( summary)
print( sentiment)

for ticker in stock_news:
    print(f"\nüìå {ticker}")
    print(f"üì∞ Summary: {stock_news[ticker]['summary']}")
    print(f"üìà Sentiment: {stock_news[ticker]['sentiment']}")

# Combine everything into a pandas DataFrame
final_data = []

for ticker in tickers:
    latest_price = df_prices[ticker].iloc[-1]
    prev_price = df_prices[ticker].iloc[-2] if len(df_prices[ticker]) > 1 else None
    change = latest_price - prev_price if prev_price else 0
    summary = stock_news[ticker]['summary']
    sentiment = stock_news[ticker]['sentiment']

    final_data.append({
        "Ticker": ticker,
        "Latest Price": round(latest_price, 2),
        "Change": round(change, 2),
        "Sentiment": sentiment,
        "News Summary": summary
    })

df_final = pd.DataFrame(final_data)
df_final

def highlight_sentiment(val):
    color = 'green' if val == 'POSITIVE' else 'red' if val == 'NEGATIVE' else 'gray'
    return f'color: {color}'

df_final.style.applymap(highlight_sentiment, subset=['Sentiment'])

df_final.to_csv("stock_insights.csv", index=False)

import matplotlib.pyplot as plt

# Make one plot per stock
for ticker in tickers:
    prices = df_prices[ticker]

    plt.figure(figsize=(8, 4))
    plt.plot(prices.index, prices.values, marker='o', label=f"{ticker} Closing Price")

    sentiment = stock_news[ticker]["sentiment"]
    plt.title(f"{ticker} | Sentiment: {sentiment}", fontsize=14, color="green" if sentiment == "POSITIVE" else "red")

    plt.xlabel("Date")
    plt.ylabel("Price ($)")
    plt.grid(True)
    plt.legend()
    plt.tight_layout()
    plt.show()





































"""# New Section"""

